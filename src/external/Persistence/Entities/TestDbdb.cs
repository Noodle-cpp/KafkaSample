// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Persistence
{
	public partial class TestDbdb : DataConnection
	{
		public TestDbdb()
		{
			InitDataContext();
		}

		public TestDbdb(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDbdb(DataOptions<TestDbdb> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Author> Authors => this.GetTable<Author>();
		public ITable<Book>   Books   => this.GetTable<Book>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Author? Find(this ITable<Author> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Author?> FindAsync(this ITable<Author> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Book? Find(this ITable<Book> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Book?> FindAsync(this ITable<Book> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion
	}
}
